#code written in python on MecSimCalc
import folium
from opencage.geocoder import OpenCageGeocode
import requests

def search_nearby_entities(location_name, radius, api_key):
    geocoder = OpenCageGeocode(api_key)

    # Geocode the user's location using the OpenCage Geocoding API
    results = geocoder.geocode(location_name)

    if results and 'geometry' in results[0]:
        location = results[0]['geometry']
        lat, lon = location['lat'], location['lng']

        # Construct Overpass QL query to find engineering companies, offices, and research-related entities within the specified radius
        overpass_query = f"""
            [out:json];
            (
                node["office"="engineering"](around:{radius},{lat},{lon});
                node["industrial"](around:{radius},{lat},{lon});
                node["research"](around:{radius},{lat},{lon});
                node["laboratory"](around:{radius},{lat},{lon});
                node["research_institute"](around:{radius},{lat},{lon});
            );
            out;
        """

        # Make a request to the Overpass API
        response = requests.post("https://overpass-api.de/api/interpreter", data=overpass_query)

        if response.status_code == 200:
            # Extract entity locations from the Overpass API response
            entities = response.json().get('elements', [])
            return entities, lat, lon

    return [], None, None

def main(inputs):
    try:
        # Get user input for location and radius
        location_name = inputs['input_0']
        radius = int(inputs['radius']) if 'radius' in inputs else 50000  # Set default radius to 10 km if not provided
        api_key = '671c5c27abca45f6a59fd52eaf3c12a2'  # Replace with your OpenCage API key

        # Search for nearby entities using the Overpass API
        entities, home_lat, home_lon = search_nearby_entities(location_name, radius, api_key)

        if not entities:
            return {'error': 'No entities found'}

        # Create a map object
        m = folium.Map(location=[home_lat, home_lon], zoom_start=10)

        # Add a red marker for the user's home location
        folium.Marker(
            location=[home_lat, home_lon],
            popup='Home Location',
            tooltip='Click on Marker',
            icon=folium.Icon(color='red', icon='home', prefix='fa'),
            draggable=True,
        ).add_to(m)

        # Add markers for nearby entities and list their names
        entity_names = []
        for entity in entities:
            entity_names.append(entity.get('tags', {}).get('name', 'Unknown Entity'))
            folium.Marker(
                location=[entity['lat'], entity['lon']],
                popup=entity_names[-1],
                tooltip='Click on Marker',
                icon=folium.Icon(color='blue', icon='building', prefix='fa'),
                draggable=True
            ).add_to(m)

        # Export folium map as HTML string
        map_html = m._repr_html_()

        # Return only the map HTML string and list of entity names as the output
        return {'map_output': map_html, 'entity_names': entity_names}
    except Exception as e:
        return {'error': str(e)}

# Example usage with a radius of 10000 meters
inputs = {'input_0': 'Your Location', 'radius': '10000'}
output = main(inputs)
print(output)
